# -*- coding: utf-8 -*-
"""ClassificacaoBinaria.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1peUxk1uamxmkmDKtBZIdDsGty2UOKEN7
"""

import pandas as pd

pd.__version__

#previsores
X = pd.read_csv('/content/entradas_breast.csv')

#classe
y = pd.read_csv('/content/saidas_breast.csv')

import sklearn
from sklearn.model_selection import train_test_split

sklearn.__version__

X_treinamento, X_teste, y_treinamento, y_teste = train_test_split(X,y, test_size = 0.25)

X_treinamento.shape, y_treinamento.shape

X_teste.shape, y_teste.shape

import tensorflow as tf
from tensorflow.keras.models import Sequential

tf.__version__

rede_neural = Sequential([
    tf.keras.layers.InputLayer(shape = (30,)),
    tf.keras.layers.Dense(units = 16, activation = 'relu', kernel_initializer = 'random_uniform'),
    tf.keras.layers.Dense(units = 16, activation = 'relu', kernel_initializer = 'random_uniform'),
    tf.keras.layers.Dense(units = 1, activation = 'sigmoid')
])

rede_neural.summary()

otimizador = tf.keras.optimizers.Adam(learning_rate = 0.001, clipvalue= 0.5)

rede_neural.compile(optimizer = otimizador, loss = 'binary_crossentropy', metrics = ['binary_accuracy'])

rede_neural.fit(X_treinamento, y_treinamento, batch_size = 10, epochs = 100)

pesos_0 = rede_neural.layers[0].get_weights()
pesos_0

len(pesos_0)

previsoes = rede_neural.predict(X_teste)

previsoes = previsoes > 0.5

previsoes

from sklearn.metrics import accuracy_score, confusion_matrix

accuracy_score(y_teste, previsoes)

confusion_matrix(y_teste, previsoes)

rede_neural.evaluate(X_teste, y_teste)